// Code generated by mockery v2.53.3. DO NOT EDIT.

package dao

import (
	model "github.com/gavinklfong/go-forex-trade-api/model"
	mock "github.com/stretchr/testify/mock"
)

// MockForexTradeDealDao is an autogenerated mock type for the ForexTradeDealDao type
type MockForexTradeDealDao struct {
	mock.Mock
}

type MockForexTradeDealDao_Expecter struct {
	mock *mock.Mock
}

func (_m *MockForexTradeDealDao) EXPECT() *MockForexTradeDealDao_Expecter {
	return &MockForexTradeDealDao_Expecter{mock: &_m.Mock}
}

// FindByID provides a mock function with given fields: id
func (_m *MockForexTradeDealDao) FindByID(id string) (*model.ForexTradeDeal, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *model.ForexTradeDeal
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ForexTradeDeal, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ForexTradeDeal); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ForexTradeDeal)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockForexTradeDealDao_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockForexTradeDealDao_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - id string
func (_e *MockForexTradeDealDao_Expecter) FindByID(id interface{}) *MockForexTradeDealDao_FindByID_Call {
	return &MockForexTradeDealDao_FindByID_Call{Call: _e.mock.On("FindByID", id)}
}

func (_c *MockForexTradeDealDao_FindByID_Call) Run(run func(id string)) *MockForexTradeDealDao_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockForexTradeDealDao_FindByID_Call) Return(_a0 *model.ForexTradeDeal, _a1 error) *MockForexTradeDealDao_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockForexTradeDealDao_FindByID_Call) RunAndReturn(run func(string) (*model.ForexTradeDeal, error)) *MockForexTradeDealDao_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: deal
func (_m *MockForexTradeDealDao) Insert(deal *model.ForexTradeDeal) (int64, error) {
	ret := _m.Called(deal)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ForexTradeDeal) (int64, error)); ok {
		return rf(deal)
	}
	if rf, ok := ret.Get(0).(func(*model.ForexTradeDeal) int64); ok {
		r0 = rf(deal)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*model.ForexTradeDeal) error); ok {
		r1 = rf(deal)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockForexTradeDealDao_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockForexTradeDealDao_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - deal *model.ForexTradeDeal
func (_e *MockForexTradeDealDao_Expecter) Insert(deal interface{}) *MockForexTradeDealDao_Insert_Call {
	return &MockForexTradeDealDao_Insert_Call{Call: _e.mock.On("Insert", deal)}
}

func (_c *MockForexTradeDealDao_Insert_Call) Run(run func(deal *model.ForexTradeDeal)) *MockForexTradeDealDao_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.ForexTradeDeal))
	})
	return _c
}

func (_c *MockForexTradeDealDao_Insert_Call) Return(_a0 int64, _a1 error) *MockForexTradeDealDao_Insert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockForexTradeDealDao_Insert_Call) RunAndReturn(run func(*model.ForexTradeDeal) (int64, error)) *MockForexTradeDealDao_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockForexTradeDealDao creates a new instance of MockForexTradeDealDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockForexTradeDealDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockForexTradeDealDao {
	mock := &MockForexTradeDealDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
