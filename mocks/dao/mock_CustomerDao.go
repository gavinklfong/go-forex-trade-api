// Code generated by mockery v2.53.3. DO NOT EDIT.

package dao

import (
	model "github.com/gavinklfong/go-forex-trade-api/model"
	mock "github.com/stretchr/testify/mock"
)

// MockCustomerDao is an autogenerated mock type for the CustomerDao type
type MockCustomerDao struct {
	mock.Mock
}

type MockCustomerDao_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCustomerDao) EXPECT() *MockCustomerDao_Expecter {
	return &MockCustomerDao_Expecter{mock: &_m.Mock}
}

// FindByID provides a mock function with given fields: id
func (_m *MockCustomerDao) FindByID(id string) (*model.Customer, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *model.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Customer, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Customer); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCustomerDao_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockCustomerDao_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - id string
func (_e *MockCustomerDao_Expecter) FindByID(id interface{}) *MockCustomerDao_FindByID_Call {
	return &MockCustomerDao_FindByID_Call{Call: _e.mock.On("FindByID", id)}
}

func (_c *MockCustomerDao_FindByID_Call) Run(run func(id string)) *MockCustomerDao_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCustomerDao_FindByID_Call) Return(_a0 *model.Customer, _a1 error) *MockCustomerDao_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCustomerDao_FindByID_Call) RunAndReturn(run func(string) (*model.Customer, error)) *MockCustomerDao_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByTier provides a mock function with given fields: tier
func (_m *MockCustomerDao) FindByTier(tier int) ([]*model.Customer, error) {
	ret := _m.Called(tier)

	if len(ret) == 0 {
		panic("no return value specified for FindByTier")
	}

	var r0 []*model.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*model.Customer, error)); ok {
		return rf(tier)
	}
	if rf, ok := ret.Get(0).(func(int) []*model.Customer); ok {
		r0 = rf(tier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(tier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCustomerDao_FindByTier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByTier'
type MockCustomerDao_FindByTier_Call struct {
	*mock.Call
}

// FindByTier is a helper method to define mock.On call
//   - tier int
func (_e *MockCustomerDao_Expecter) FindByTier(tier interface{}) *MockCustomerDao_FindByTier_Call {
	return &MockCustomerDao_FindByTier_Call{Call: _e.mock.On("FindByTier", tier)}
}

func (_c *MockCustomerDao_FindByTier_Call) Run(run func(tier int)) *MockCustomerDao_FindByTier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockCustomerDao_FindByTier_Call) Return(result []*model.Customer, err error) *MockCustomerDao_FindByTier_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockCustomerDao_FindByTier_Call) RunAndReturn(run func(int) ([]*model.Customer, error)) *MockCustomerDao_FindByTier_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: customer
func (_m *MockCustomerDao) Insert(customer *model.Customer) (int64, error) {
	ret := _m.Called(customer)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Customer) (int64, error)); ok {
		return rf(customer)
	}
	if rf, ok := ret.Get(0).(func(*model.Customer) int64); ok {
		r0 = rf(customer)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*model.Customer) error); ok {
		r1 = rf(customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCustomerDao_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockCustomerDao_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - customer *model.Customer
func (_e *MockCustomerDao_Expecter) Insert(customer interface{}) *MockCustomerDao_Insert_Call {
	return &MockCustomerDao_Insert_Call{Call: _e.mock.On("Insert", customer)}
}

func (_c *MockCustomerDao_Insert_Call) Run(run func(customer *model.Customer)) *MockCustomerDao_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Customer))
	})
	return _c
}

func (_c *MockCustomerDao_Insert_Call) Return(_a0 int64, _a1 error) *MockCustomerDao_Insert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCustomerDao_Insert_Call) RunAndReturn(run func(*model.Customer) (int64, error)) *MockCustomerDao_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCustomerDao creates a new instance of MockCustomerDao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCustomerDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCustomerDao {
	mock := &MockCustomerDao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
