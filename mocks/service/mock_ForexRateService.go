// Code generated by mockery v2.53.3. DO NOT EDIT.

package service

import (
	model "github.com/gavinklfong/go-forex-trade-api/model"
	mock "github.com/stretchr/testify/mock"
)

// MockForexRateService is an autogenerated mock type for the ForexRateService type
type MockForexRateService struct {
	mock.Mock
}

type MockForexRateService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockForexRateService) EXPECT() *MockForexRateService_Expecter {
	return &MockForexRateService_Expecter{mock: &_m.Mock}
}

// BookRate provides a mock function with given fields: request
func (_m *MockForexRateService) BookRate(request *model.ForexRateBookingRequest) *model.ForexRateBooking {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for BookRate")
	}

	var r0 *model.ForexRateBooking
	if rf, ok := ret.Get(0).(func(*model.ForexRateBookingRequest) *model.ForexRateBooking); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ForexRateBooking)
		}
	}

	return r0
}

// MockForexRateService_BookRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BookRate'
type MockForexRateService_BookRate_Call struct {
	*mock.Call
}

// BookRate is a helper method to define mock.On call
//   - request *model.ForexRateBookingRequest
func (_e *MockForexRateService_Expecter) BookRate(request interface{}) *MockForexRateService_BookRate_Call {
	return &MockForexRateService_BookRate_Call{Call: _e.mock.On("BookRate", request)}
}

func (_c *MockForexRateService_BookRate_Call) Run(run func(request *model.ForexRateBookingRequest)) *MockForexRateService_BookRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.ForexRateBookingRequest))
	})
	return _c
}

func (_c *MockForexRateService_BookRate_Call) Return(_a0 *model.ForexRateBooking) *MockForexRateService_BookRate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockForexRateService_BookRate_Call) RunAndReturn(run func(*model.ForexRateBookingRequest) *model.ForexRateBooking) *MockForexRateService_BookRate_Call {
	_c.Call.Return(run)
	return _c
}

// GetRateByCurrencyPair provides a mock function with given fields: baseCurrency, counterCurrency
func (_m *MockForexRateService) GetRateByCurrencyPair(baseCurrency string, counterCurrency string) (*model.ForexRate, error) {
	ret := _m.Called(baseCurrency, counterCurrency)

	if len(ret) == 0 {
		panic("no return value specified for GetRateByCurrencyPair")
	}

	var r0 *model.ForexRate
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.ForexRate, error)); ok {
		return rf(baseCurrency, counterCurrency)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.ForexRate); ok {
		r0 = rf(baseCurrency, counterCurrency)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ForexRate)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(baseCurrency, counterCurrency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockForexRateService_GetRateByCurrencyPair_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRateByCurrencyPair'
type MockForexRateService_GetRateByCurrencyPair_Call struct {
	*mock.Call
}

// GetRateByCurrencyPair is a helper method to define mock.On call
//   - baseCurrency string
//   - counterCurrency string
func (_e *MockForexRateService_Expecter) GetRateByCurrencyPair(baseCurrency interface{}, counterCurrency interface{}) *MockForexRateService_GetRateByCurrencyPair_Call {
	return &MockForexRateService_GetRateByCurrencyPair_Call{Call: _e.mock.On("GetRateByCurrencyPair", baseCurrency, counterCurrency)}
}

func (_c *MockForexRateService_GetRateByCurrencyPair_Call) Run(run func(baseCurrency string, counterCurrency string)) *MockForexRateService_GetRateByCurrencyPair_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockForexRateService_GetRateByCurrencyPair_Call) Return(_a0 *model.ForexRate, _a1 error) *MockForexRateService_GetRateByCurrencyPair_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockForexRateService_GetRateByCurrencyPair_Call) RunAndReturn(run func(string, string) (*model.ForexRate, error)) *MockForexRateService_GetRateByCurrencyPair_Call {
	_c.Call.Return(run)
	return _c
}

// GetRatesByBaseCurrency provides a mock function with given fields: baseCurrency
func (_m *MockForexRateService) GetRatesByBaseCurrency(baseCurrency string) ([]*model.ForexRate, error) {
	ret := _m.Called(baseCurrency)

	if len(ret) == 0 {
		panic("no return value specified for GetRatesByBaseCurrency")
	}

	var r0 []*model.ForexRate
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*model.ForexRate, error)); ok {
		return rf(baseCurrency)
	}
	if rf, ok := ret.Get(0).(func(string) []*model.ForexRate); ok {
		r0 = rf(baseCurrency)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ForexRate)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(baseCurrency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockForexRateService_GetRatesByBaseCurrency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRatesByBaseCurrency'
type MockForexRateService_GetRatesByBaseCurrency_Call struct {
	*mock.Call
}

// GetRatesByBaseCurrency is a helper method to define mock.On call
//   - baseCurrency string
func (_e *MockForexRateService_Expecter) GetRatesByBaseCurrency(baseCurrency interface{}) *MockForexRateService_GetRatesByBaseCurrency_Call {
	return &MockForexRateService_GetRatesByBaseCurrency_Call{Call: _e.mock.On("GetRatesByBaseCurrency", baseCurrency)}
}

func (_c *MockForexRateService_GetRatesByBaseCurrency_Call) Run(run func(baseCurrency string)) *MockForexRateService_GetRatesByBaseCurrency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockForexRateService_GetRatesByBaseCurrency_Call) Return(_a0 []*model.ForexRate, _a1 error) *MockForexRateService_GetRatesByBaseCurrency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockForexRateService_GetRatesByBaseCurrency_Call) RunAndReturn(run func(string) ([]*model.ForexRate, error)) *MockForexRateService_GetRatesByBaseCurrency_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockForexRateService creates a new instance of MockForexRateService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockForexRateService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockForexRateService {
	mock := &MockForexRateService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
